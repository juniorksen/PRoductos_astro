---
// login.astro
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = 'passar'; 

// Función para manejar el registro
const registerUser = async (formData: FormData) => {
  const username = formData.get('username') as string;
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;

  // Hashea la contraseña
  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    // Crea el nuevo usuario
    const newUser = await prisma.usuario.create({
      data: {
        username,
        email,
        password: hashedPassword,
      },
    });

    // Generar el token JWT con la información del usuario
    const token = jwt.sign(
      { 
        id: newUser.id, 
        username: newUser.username, 
        email: newUser.email,
        profile_picture_url: newUser.profile_picture_url,  // Agregar la URL de la foto de perfil
        cover_photo_url: newUser.cover_photo_url // Agregar la URL de la foto de portada
      }, 
      JWT_SECRET,
      {
        expiresIn: '1h', // Tiempo de expiración del token
      }
    );


    // Establece el token en una cookie para poder acceder a él desde el lado del servidor
    Astro.cookies.set('token', token, { httpOnly: true });

    // Redirige a la página principal
    return { success: true };
  } catch (error) {
    console.error('Error al crear el usuario:', error);
    return { success: false, error: 'Error al crear la cuenta' };
  }
};

// Si hay un método POST, intenta registrar al usuario
let registrationResult;
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  registrationResult = await registerUser(formData);

  if (registrationResult?.success) {
    return Astro.redirect('/comprobar');
  }
}

---

<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Iniciar sesión / Registro</title>
</head>
<body class="flex items-center justify-center h-screen bg-gray-100">
    <div class="bg-white p-6 rounded-lg shadow-md w-96">
        <h1 class="text-2xl font-bold mb-4 text-center">Iniciar sesión / Registro</h1>

        <!-- Mensaje de error si la creación de cuenta falla -->
        {registrationResult?.success === false && (
            <div class="text-red-500 text-sm mb-4">
                {registrationResult.error}
            </div>
        )}

        <!-- Formulario de Registro -->
        <h2 class="text-lg font-semibold mt-6">Crear Cuenta</h2>
        <form method="POST" class="space-y-4">
            <div>
                <label for="username" class="block text-sm font-medium text-gray-700">Nombre de usuario:</label>
                <input type="text" id="username" name="username" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
            </div>
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Correo electrónico:</label>
                <input type="email" id="email" name="email" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
            </div>
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Contraseña:</label>
                <input type="password" id="password" name="password" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
            </div>
            <button type="submit" class="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                Crear Cuenta
            </button>
        </form>
    </div>
</body>
</html>
